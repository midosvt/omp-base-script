#include <YSI_Coding\y_hooks>

//-----------------------------------------------------------------------------
// Definitions
//-----------------------------------------------------------------------------

// Called after `Account_Check` completes.  Handle login or registration here.
forward public OnPlayerAccountCheck(playerid);

// Called after a password is hashed during registration.
forward public OnPasswordHash(playerid);

// Called after a new account has been successfully inserted into the database.
forward public OnPlayerRegister(playerid);

// Called after a password check during login.
forward public OnPasswordCheck(playerid, bool:match);

// Called when a player sucessfully logs in.
forward public OnPlayerLogin(playerid);

// Maximum allowed login attempts before a player is kicked.
#define MAX_LOGIN_ATTEMPTS (3)

// Stores the number of login attempts made by each player.
static s_PlayerLoginAttempts[MAX_PLAYERS] = { 0, ... };

//-----------------------------------------------------------------------------
// Hooks
//-----------------------------------------------------------------------------

hook OnPlayerConnect(playerid)
{
    // Checks if an account exists for the player in the database.
    Account_Check(playerid);

    return 1;
}

// Called after `Account_Check` completes.  Handle login or registration here.
hook OnPlayerAccountCheck(playerid)
{
    // No account found.  Prompt registration.
    if (cache_num_rows() == 0)
    {
        Account_ShowRegistrationDialog(playerid);
        return 1;
    }

    // Account found.
    
    // Fetch the player's password hash for some checking later.
    new tempPassword[BCRYPT_HASH_LENGTH];
    cache_get_value_name(0, "password_hash", tempPassword);
    SetPVarString(playerid, "tempPassword", tempPassword);

    // Show login dialog.
    Account_ShowLoginDialog(playerid);

    return 1;
}

hook OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    // Fun fact, `switch` is way faster in open.mp.
    switch (dialogid)
    {
        case DIALOG_REGISTRATION:
        {
            if (!response)
            {
                Kick(playerid);
            }
            else
            {
                // Check if the password meets the requirements.
                if (!IsValidPassword(inputtext))
                {
                    Account_ShowRegistrationDialog(playerid, .badpass = true);   
                }
                else
                {
                    // Password looks good.  Now hash the password.
                    HashPassword(playerid, inputtext);
                }
            }

            // Return 1 to indicate the dialog was handled. 
            return 1;
        }

        case DIALOG_LOGIN:
        {
            if (!response)
            {
                Kick(playerid);
            }
            else
            {
                // Get the temporarily stored hash.
                new tempHash[BCRYPT_HASH_LENGTH];
                GetPVarString(playerid, "tempPassword", tempHash);

                // Compare hashes.
                bcrypt_verify(playerid, "OnPasswordCheck", inputtext, tempHash);
            }

            // Return 1 to indicate the dialog was handled. 
            return 1;  
        }
    }

    // Return 0 for unhandled dialogs, just like in `OnPlayerCommandText`.
    return 0;
}

// Called after a password is hashed.
hook OnPasswordHash(playerid)
{
    // Retrieve the password hash generated by BCrypt.
    new hash[BCRYPT_HASH_LENGTH];
    bcrypt_get_hash(hash);

    // Create an account for the player and insert it into the database.
    Account_Create(playerid, hash);

    return 1;
}

// Called after a new account has been successfully inserted into the database.
hook OnPlayerRegister(playerid)
{
    // Cache the last inserted ID from the database for this player (account ID).
    new const accountID = cache_insert_id();
    SetPlayerAccountID(playerid, accountID);

    // Mark the player as logged in.
    SetPlayerLoggedIn(playerid, true);

    return 1;
}

// Called after a password check during login.
hook OnPasswordCheck(playerid, bool:match)
{
    // Password is correct.
    if (match)
    {
        // Mark the player as logged in.
        SetPlayerLoggedIn(playerid, true);

        // Password hash should not be kept in memory.
        DeletePVar(playerid, "tempPassword");

        // Reset attempts.
        s_PlayerLoginAttempts[playerid] = 0;

        // You can load the player's data here, etc.
        CallLocalFunction("OnPlayerLogin", "d", playerid);
    }

    // Password is not correct.
    else 
    {
        s_PlayerLoginAttempts[playerid]++;

        // If maximum attempts exceeded, kick the player.
        if (s_PlayerLoginAttempts[playerid] >= MAX_LOGIN_ATTEMPTS)
        {
            SendClientMessage(playerid, COLOR_RED, "You've been kicked due to too many failed login attempts.");
            Kick(playerid);
        }
        else
        {
            // Otherwise, let the player try again.
            Account_ShowLoginDialog(playerid);

            // Attempts remaining.
            new attemptsLeft = MAX_LOGIN_ATTEMPTS - s_PlayerLoginAttempts[playerid];
            SendClientMessage(playerid, COLOR_RED, "Wrong password. You still have %d %s left.", attemptsLeft, attemptsLeft == 1 ? "attempt" : "attempts");
        }
    }

    return 1;
}

// Called when a player sucessfully logs in.
hook OnPlayerLogin(playerid)
{
    // You can load the player's data here, etc.

    return 1;
}